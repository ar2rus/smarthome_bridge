package com.gargon.smarthome.enums;

/**
 * @author gargon
 */
public enum Command {

    /* Поиск других устройств, параметров нет */
    DISCOVERY(0x00),

    /* Ответ устройств на поиск, в качестве параметра - название устройства (текст) */
    DISCOVERY_RESPONSE(0x01),

    /* Работа с загрузчиком. Данные - субкоманда.
     <-0 - загрузчик запущен
     ->1 - перейти в режим обновления прошивки
     <-2 - подтверждение перехода, плюс два байта - размер страницы
     ->3 запись прошивки, 4 байта - адрес, всё остальное - данные (равные размеру страницы)
     <-4 блок прошивки записан
     ->5 выход из режима прошивки */
    BOOT_CONTROL(0x02),

    /* Перезагружает устройство в загрузчик. */
    REBOOT(0x03),
    /* Посылается устройством после инициализации библиотеки, сообщает об успешной загрузке устройства.
     Параметр - содержимое MCU регистра, говорящее о причине перезагрузки. */
    BOOT_COMPLETED(0x04),

    /*Запрос текущего времени*/
    TIME(0x08),

    /*Сообщение о текущем времени*/
    TIME_INFO(0x09),

    /* Пинг, на эту команду устройство должно ответить следующей командой, возвратив весь буфер */
    PING(0xFE),
    /* Ответ на пинг, в данных то, что было прислано в предыдущей команде */
    PING_REPLY(0xFF),

    /* Команда переключения канала*/
    CHANNEL(0x10),

    /* Сообщение о номере текущего канала*/
    CHANNEL_INFO(0x11),

    /* Команда управления громкостью устройства*/
    VOLUME(0x15),

    /* Сообщение о состоянии громкости устройства*/
    VOLUME_INFO(0x16),

    /* Команда отключения звука устройства*/
    MUTE(0x17),

    /* Команда управления эквалайзером*/
    EQUALIZER(0x18),

    /* Сообщение о состоянии эквалайзера*/
    EQUALIZER_INFO(0x19),

    /* Команда управления FM-приемником*/
    FM(0x1C),

    /* Сообщение о состоянии FM-приемника*/
    FM_INFO(0x1D),

    /* Команда управления включением/выключением устройства*/
    POWER(0x1E),

    /* Команда запроса состояния (вкл/выкл) устройства*/
    POWER_INFO(0x1F),

    /* Команда управления выключателями/реле*/
    SWITCH(0x20),

    /* Сообщение о состоянии всех выключателей устройства в виде битовой маски*/
    SWITCH_INFO(0x21),

    /* Команда запроса состояния нефиксируемых кнопок*/
    BUTTON(0x22),

    /* Сообщает о состоянии нефиксируемой кнопки*/
    BUTTON_INFO(0x23),

    /* Сообщает код набранный с помощью диска телефона*/
    ROTARY_DIAL_NUMBER_INFO(0x24),

    /* Команда запроса текущей температуры*/
    TEMPERATURE(0x25),

    /* Сообщение о температуре*/
    TEMPERATURE_INFO(0x26),

    /* Команда запроса текущей влажности*/
    HUMIDITY(0x27),

    /* Сообщает об уровне влажности*/
    HUMIDITY_INFO(0x28),

    /* Команда запроса текущего атмосферного давления*/
    PRESSURE(0x29),

    /* Сообщает об уровне атмосферного давления*/
    PRESSURE_INFO(0x2A),

    /* Команда запроса метеоданных*/
    METEO(0x2E),

    /* Сообщает метеоданные*/
    METEO_INFO(0x2F),


    /* Команда поиска 1-wire устройств*/
    ONEWIRE_SEARCH(0x30),

    /* Сообщает о найденном 1-wire устройстве*/
    ONEWIRE_INFO(0x31),

    /* Команда запроса напряжения*/
    VOLTAGE(0x32),

    /* Сообщает об уровне напряжения*/
    VOLTAGE_INFO(0x33),

    /* Команда запроса наличия движения*/
    MOTION(0x40),

    /* Сообщает о наличии движения в помещении*/
    MOTION_INFO(0x41),

    /* Команда запроса уровня освещенности*/
    LIGHT_LEVEL(0x45),

    /* Сообщает об уровне  освещенности*/
    LIGHT_LEVEL_INFO(0x46),

    /* Команда управления вентилятором */
    FAN(0x50),

    /* Сообщает о текущем состоянии вентилятора */
    FAN_INFO(0x51),

    /* Команда управления подзарядкой устройств */
    CHARGE(0x52),

    /* Сообщает о текущем состоянии процесса зарядки */
    CHARGE_INFO(0x53),

    /* Команда запроса состояния дверей*/
    DOORS(0x55),

    /* Сообщает о текущем состоянии дверей */
    DOORS_INFO(0x56),


    /* Команда упрвления диммером*/
    DIMMER(0x57),

    /* Сообщает о текущем состоянии диммера */
    DIMMER_INFO(0x58),


    /* Команда управления теплым полом */
    HEATFLOOR(0x60),

    /* Сообщает о состоянии теплого пола */
    HEATFLOOR_INFO(0x61),


    /* Команда управления сервоприводом */
    SERVO(0x66),

    /* Сообщает о состоянии сервопривода */
    SERVO_INFO(0x67),


    /* Команда управления состоянием произвольного устройства */
    DEVICE_STATE(0x70),

    /* Сообщает о состоянии произвольного устройства */
    DEVICE_STATE_INFO(0x71),

    /* Сообщает о  о нажатии кнопки на ПДУ */
    RC_BUTTON_PRESSED(0x75),

    /* Эмулирует нажтие кнопки на ПДУ */
    //RC_BUTTON_SEND(0x76),


    /* Команда блокирования*/
    ANDROID(0xA0),

    /* Команда отладки*/
    DEBUG(0x99);


    private int value;

    Command(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public static Command getByValue(int value) {
        for (Command c : values()) {
            if (value == c.value) {
                return c;
            }
        }
        return null;
    }
}
